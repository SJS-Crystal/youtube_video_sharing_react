name: Deployment Workflow Template

on:
  workflow_call:
    inputs:
      DOCKER_IMAGE_TAG:
        description: 'Docker image tag'
        required: true
        type: string

      serverSelection:
        description: 'Enter server number (e.g., 1 for SERVER1, 2 for SERVER2)'
        required: true
        type: string

      environmentName:
        description: 'Enter the environment name'
        required: true
        type: string

      approvalEnvironmentName:
        description: 'Enter the approval environment name'
        required: true
        type: string

jobs:
  approval:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.approvalEnvironmentName }}

    steps:
      - name: Wait for approval
        run: echo "Waiting for admin approval..."

  manual_deploy:
    needs: [approval]
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environmentName }}

    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Server
        shell: bash
        env:
          HOST_SECRET_NAME: ${{ format('SERVER_HOST_{0}', inputs.serverSelection) }}
          USER_SECRET_NAME: ${{ format('SERVER_USER_{0}', inputs.serverSelection) }}
          SSH_KEY_SECRET_NAME: ${{ format('SERVER_SSH_KEY_{0}', inputs.serverSelection) }}

        run: |
          echo "${{ secrets[env.SSH_KEY_SECRET_NAME] }}" > server_ssh_file
          chmod 400 server_ssh_file
          ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets[env.USER_SECRET_NAME] }}@${{ secrets[env.HOST_SECRET_NAME] }} 'mkdir -p /home/project/'
          scp -i server_ssh_file -o StrictHostKeyChecking=no docker-compose.server.yml ${{ secrets[env.USER_SECRET_NAME] }}@${{ secrets[env.HOST_SECRET_NAME] }}:/home/project/
          ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets[env.USER_SECRET_NAME] }}@${{ secrets[env.HOST_SECRET_NAME] }} << 'EOF'
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            export DOCKER_IMAGE_TAG=${{ inputs.DOCKER_IMAGE_TAG }}
            export DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /home/project/
            docker-compose -f docker-compose.server.yml down
            docker-compose -f docker-compose.server.yml up -d
          EOF
