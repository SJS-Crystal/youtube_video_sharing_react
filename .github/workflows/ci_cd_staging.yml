name: CI/CD Staging

on:
  pull_request:
    branches:
    - main
    types: [opened, synchronize, reopened]

jobs:
  run_test_Staging:
    if: >
      github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && (
        startsWith(github.event.pull_request.head.ref, 'release') ||
        startsWith(github.event.pull_request.head.ref, 'hotfix')
      )

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Run tests
      run: npm test


  docker_build_Staging:
    if: >
      github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && (
        startsWith(github.event.pull_request.head.ref, 'release') ||
        startsWith(github.event.pull_request.head.ref, 'hotfix')
      )

    needs: [run_test_Staging]
    runs-on: ubuntu-latest
    environment:
      name: staging
    outputs:
      IMAGE_TAG: ${{ steps.build_image.outputs.IMAGE_TAG }}
    steps:
    - uses: actions/checkout@v2

    - name: Create env file
      run: |
        echo "${{ secrets.ENV_FILE }}" > .env

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      id: build_image
      run: |
        export DOMAIN_NAME=${{ vars.DOMAIN_NAME_1 }}
        if [ -z "$DOMAIN_NAME" ]; then
            echo "::ERROR: 'DOMAIN_NAME_1' ENV VARIABLE IS EMPTY! PLEASE SET THIS VARIABLE"
            exit 1
        fi
        envsubst '$DOMAIN_NAME' < domain.conf.template > default.conf
        envsubst '$DOMAIN_NAME' < Dockerfile.template > Dockerfile.server
        IMAGE_TAG=${GITHUB_SHA::7}
        echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        echo "Building image with tag ${IMAGE_TAG}"
        docker build . -f Dockerfile.server -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}
        echo "Pushing image ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}


  deploy_Staging:
    if: >
      github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && (
        startsWith(github.event.pull_request.head.ref, 'release') ||
        startsWith(github.event.pull_request.head.ref, 'hotfix')
      )
    needs: [docker_build_Staging]
    uses: ./.github/workflows/_deploy-template.yml
    secrets: inherit
    with:
      DOCKER_IMAGE_TAG: ${{ needs.docker_build_Staging.outputs.IMAGE_TAG }}
      serverSelection: '1'
      environmentName: staging
      approvalEnvironmentName: approval_staging_deloyment


  need_merge_main_approval:
    runs-on: ubuntu-latest
    environment:
      name: approval_merge_main_branch
    steps:
      - name: Wait for merge approval 
        run: echo "Waiting for admin merge approval..."
