name: Deploy Development

on:
  issue_comment:
    types: 
      - created

jobs:
  check-pr-status:
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/build_and_deploy_s')
    runs-on: ubuntu-latest
    outputs:
      PR_STATUS: ${{ steps.pr_status.outputs.PR_STATUS }}
    steps:
      - name: Check if PR is open
        id: pr_status
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            core.setOutput('PR_STATUS', pr.data.state);




  docker_build_Development:
    needs: check-pr-status
    if: >
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/build_and_deploy_s') &&
      needs.check-pr-status.outputs.PR_STATUS == 'open'
    runs-on: ubuntu-latest
    environment:
      name: development
    outputs:
      IMAGE_TAG: ${{ steps.build_image.outputs.IMAGE_TAG }}
      SERVER_NUMBER: ${{ steps.target_server.outputs.SERVER_NUMBER }}
    steps:
    - uses: actions/checkout@v2

    - name: Extract server number
      id: target_server
      run: |
        echo "SERVER_NUMBER=$(echo ${{ github.event.comment.body }} | grep -o -E 's[0-9]+' | cut -c2-)" >> $GITHUB_ENV
        echo "SERVER_NUMBER=$(echo ${{ github.event.comment.body }} | grep -o -E 's[0-9]+' | cut -c2-)" >> $GITHUB_OUTPUT






    - name: Create env file
      run: echo "${{ secrets.ENV_FILE }}" > .env

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      id: build_image
      env:
        DOMAIN_KEY_NAME: ${{ format('DOMAIN_NAME_{0}', env.SERVER_NUMBER) }}
        DOMAIN_NAME: ${{ vars[env.DOMAIN_KEY_NAME] }}
      run: |
        IMAGE_TAG=${GITHUB_SHA}
        echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT
        echo "Building image with tag ${IMAGE_TAG}"
        envsubst '$DOMAIN_NAME' < domain.conf.template > default.conf
        envsubst '$DOMAIN_NAME' < Dockerfile.template > Dockerfile.server
        docker build . -f Dockerfile.server -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}
        echo "Pushing image ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}

  deploy_Development:
    needs: [docker_build_Development]
    runs-on: ubuntu-latest
    environment:
      name: development
    steps:
    - uses: actions/checkout@v2

    - name: Deploy to Server
      env:
        SERVER_NUMBER: ${{ needs.docker_build_Development.outputs.SERVER_NUMBER }}
        HOST_SECRET_NAME: ${{ format('SERVER_HOST_{0}', env.SERVER_NUMBER ) }}
        USER_SECRET_NAME: ${{ format('SERVER_USER_{0}', env.SERVER_NUMBER ) }}
        SSH_KEY_SECRET_NAME: ${{ format('SERVER_SSH_KEY_{0}', env.SERVER_NUMBER ) }}

      run: |
        echo "${{ secrets[env.SSH_KEY_SECRET_NAME] }}" > server_ssh_file
        chmod 400 server_ssh_file
        ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets[env.USER_SECRET_NAME] }}@${{ secrets[env.HOST_SECRET_NAME] }} 'mkdir -p /home/project/'
        scp -i server_ssh_file -o StrictHostKeyChecking=no docker-compose.server.yml ${{ secrets[env.USER_SECRET_NAME] }}@${{ secrets[env.HOST_SECRET_NAME] }}:/home/project/
        ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets[env.USER_SECRET_NAME] }}@${{ secrets[env.HOST_SECRET_NAME] }} << 'EOF'
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export DOCKER_IMAGE_TAG=${{ inputs.DOCKER_IMAGE_TAG }}
          export DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          export DOCKER_IMAGE_TAG=${{ needs.docker_build_Development.outputs.IMAGE_TAG }}
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          cd /home/project/
          docker pull $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
          docker-compose -f docker-compose.server.yml down
          docker-compose -f docker-compose.server.yml up -d
        EOF
