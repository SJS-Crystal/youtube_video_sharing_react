name: CI CD

on:
  pull_request:
    branches: [develop, main] # all PRs with develop, main branch target for testing

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Run tests
      run: npm test


  docker_build:
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: test
    outputs:
      IMAGE_TAG: ${{ steps.get_image_tag.outputs.IMAGE_TAG }}
    steps:
    - uses: actions/checkout@v2

    - name: Create env file
      run: |
        echo "${{ secrets.ENV_FILE_V1 }}" > .env

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      id: get_image_tag
      run: |
        IMAGE_TAG=${GITHUB_SHA::8}
        echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "Building image with tag ${IMAGE_TAG}"
        docker build . -f Dockerfile.staging -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}
        echo "Pushing image ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}

    - name: Create image-tag.txt
      shell: bash
      run: |
        echo ${GITHUB_SHA::8} > image-tag.txt
    - name: Save image-tag.txt to artifact
      uses: actions/upload-artifact@v4
      with:
        name: image_tag
        path: image-tag.txt

  deploy:
    needs: docker_build
    runs-on: ubuntu-latest

    environment:
      name: test
    steps:
    - uses: actions/checkout@v2
    - name: Deploy to Server
      run: |
        echo "${{ secrets.SERVER_SSH_KEY }}" > server_ssh_file
        chmod 400 server_ssh_file
        ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'mkdir -p /home/project/'
        scp -i server_ssh_file -o StrictHostKeyChecking=no docker-compose.staging.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/project/
        ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export DOCKER_IMAGE_TAG=${{ github.event.inputs.DOCKER_IMAGE_TAG || needs.docker_build.outputs.IMAGE_TAG }}
          export DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          cd /home/project/
          echo DOCKER_USERNAME
          docker-compose -f docker-compose.staging.yml down
          echo DOCKER_IMAGE_TAG
          docker-compose -f docker-compose.staging.yml up -d
        EOF
