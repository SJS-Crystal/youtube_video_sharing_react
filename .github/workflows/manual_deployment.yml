name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      DOCKER_IMAGE_TAG:
        description: 'Docker image tag (leave empty to use automatic from docker_build job)'
        required: false
        default: ''
      # environment:
      #   description: 'Target Environment (qa, staging, production)'
      #   required: true
      # qaServer:
      #   description: 'QA Environment Server Identifier (Only for QA)'
      #   required: false  # This can be optional unless the environment is QA

jobs:
  manual_deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}

    environment:
      name: test
    steps:
    # - name: Check branch
    #   if: github.event_name == 'workflow_dispatch'
    #   run: |
    #     if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref }}" != "refs/heads/development" ]]; then
    #       echo "Manual workflow dispatch is only allowed on the main or development branches."
    #       exit 1
    #     fi

    - name: Load image-tag.txt from artifact
      uses: actions/download-artifact@v4
      with:
        name: image_tag

    - name: Extract and set the latest image tag
      run: |
        latest_image_tag = `cat image_tag.txt`
        echo "latest_image_tag=$latest_image_tag" >> $GITHUB_ENV

    - name: Set DOCKER_IMAGE_TAG environment variable conditionally
      run: |
        if [ -z "${{ github.event.inputs.DOCKER_IMAGE_TAG }}" ]; then
          export DOCKER_IMAGE_TAG=$latest_image_tag
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
        else
          echo "DOCKER_IMAGE_TAG=${{ github.event.inputs.DOCKER_IMAGE_TAG }}" >> $GITHUB_ENV
        fi

    - uses: actions/checkout@v2
    - name: Deploy to Server
      run: |
        latest_image_tag=`cat image-tag.txt`
        echo "${{ secrets.SERVER_SSH_KEY }}" > server_ssh_file
        chmod 400 server_ssh_file
        ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'mkdir -p /home/project/'
        scp -i server_ssh_file -o StrictHostKeyChecking=no docker-compose.staging.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/project/
        ssh -i server_ssh_file -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG
          export DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          cd /home/project/
          docker-compose -f docker-compose.staging.yml down
          docker-compose -f docker-compose.staging.yml up -d
        EOF
