name: CI on Development

on:
  pull_request:
    branches:
    - develop

    types: [opened, synchronize, reopened]


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Run tests
      run: npm test
    # - name: Determine job status
    #   if: always()
    #   run: |
    #     job_status=$([[ ${{ steps.execute.outcome }} == 'success' ]] && echo "success" || echo "failure")
    #     echo "::set-output name=job_status::$job_status"

  docker_build:
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop')

    needs: [test]
    runs-on: ubuntu-latest
    environment:
      name: development
    outputs:
      IMAGE_TAG: ${{ steps.build_image.outputs.IMAGE_TAG }}
    steps:
    - uses: actions/checkout@v2

    - name: Create env file
      run: |
        echo "${{ secrets.ENV_FILE }}" > .env

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      id: build_image
      run: |
        IMAGE_TAG=${GITHUB_SHA::8}
        echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "Building image with tag ${IMAGE_TAG}"
        docker build . -f Dockerfile.server -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}
        echo "Pushing image ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}
    # - name: Determine job status
    #   if: always()
    #   run: |
    #     job_status=$([[ ${{ steps.execute.outcome }} == 'success' ]] && echo "success" || echo "failure")
    #     echo "::set-output name=job_status::$job_status"

  merge_approval:
    runs-on: ubuntu-latest
    environment:
      name: approval_merge_develop_branch
    steps:
      - name: Wait for merge approval 
        run: echo "Waiting for admin merge approval..."

  # check_merge_permission:
  #   runs-on: ubuntu-latest
  #   needs: [test, docker_build, merge_approval]
  #   if: always()
  #   steps:
  #     - name: Check all jobs status and decide the final state
  #       run: |
  #         test_status="${{ needs.test.outputs.job_status }}"
  #         docker_build_status="${{ needs.docker_build.outputs.job_status }}"

  #         echo "Docker build status: $docker_build_status"
  #         echo "Test status: $test_status"

  #         if [[ "$docker_build_status" != "success" || "$test_status" != "success" ]]; then
  #           echo "One or more jobs didn't succeed."
  #           exit 1
  #         else
  #           echo "All jobs succeeded."
  #         fi
