name: CI Development

on:
  pull_request:
    branches:
    - develop

    types: [opened, synchronize, reopened]


jobs:
  run_test_Development:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Run tests
      run: npm test


  docker_build_Development:
    if: (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop')
    # needs: [run_test_Development]
    runs-on: ubuntu-latest
    environment:
      name: development
    outputs:
      IMAGE_TAG: ${{ steps.build_image.outputs.IMAGE_TAG }}
    steps:
    - uses: actions/checkout@v2

    - name: Create env file
      run: |
        echo "${{ secrets.ENV_FILE }}" > .env

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Install gettext(envsubst)
      run: sudo apt-get update && sudo apt-get install -y gettext-base

    - name: Build and push Docker image
      id: build_image
      run: |
        IMAGE_TAG=${GITHUB_SHA::8}
        echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "Building image with tag ${IMAGE_TAG}"

        DOMAIN_NAME=${{env.DOMAIN_NAME_1}}
        
        envsubst '$DOMAIN_NAME' < domain.conf.template > default.conf
        echo 0000000
        cat default.conf
        echo 1111111
        cat Dockerfile.server
        echo 22222222

        envsubst '$DOMAIN_NAME' < Dockerfile.server > Dockerfile.server
        echo 333333333
        cat Dockerfile.server
        echo 444444444

        docker build . -f Dockerfile.server -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}
        echo "Pushing image ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}

  need_merge_develop_approval:
    runs-on: ubuntu-latest
    environment:
      name: approval_merge_develop_branch
    steps:
      - name: Wait for merge approval 
        run: echo "Waiting for admin merge approval..."
